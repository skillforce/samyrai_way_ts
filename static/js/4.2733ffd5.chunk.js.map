{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Status/status.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Status/StatusWithHooks.tsx","img/NewAvaPreloader.gif","components/Profile/ProfileInfo/Experemental/PresentProfile.tsx","components/Profile/ProfileInfo/Experemental/EditProfile.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/heart.png","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","statusProfile","s","changeStatus","StatusWithHooks","props","useState","isEditMode","setIsEditMode","status","setStatus","useEffect","toggleEditModeOff","updateStatus","className","onBlur","onChange","e","currentTarget","value","type","autoFocus","onClick","onDoubleClick","descriptionBlock","avatar","contactsBlock","fullNameUser","photoBlock","reInstall_ava","preloaderNewAva","workSearchBlock","searchWork","descrSearch","PresentProfile","profile","isOwner","initializedNewPhotoProfile","onMainPhotoSelected","btnHandler","fullName","photos","large","src","alt","avatarBlock","NewAvaPreloader","href","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","checked","lookingForAJobDescription","workSearchBlockEdit","contactsBlock_Edit","form_summary_error","ProfileEditReduxForm","reduxForm","form","error","onSubmit","handleSubmit","createField","InputValid","requiredField","maxLength30","ProfileInfo","savePhoto","isProfileSetMode","SetIsProfileSetMode","saveProfile","target","files","length","newStatus","initialValues","formData","then","Preloader","item","wrapper","userName","messages","times","like","Post","name","message","time","likes","id","heart","postsBlock","posts","MyPosts","React","memo","postData","addPost","postComponents","map","t","ReduxMyPostForm","data","NewPost","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainerAPI","usersId","this","match","params","userId","userIdLog","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","isNaN","Component","compose","Auth","isFetching","SetUsersProfile","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/4.2733ffd5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1_fSv\",\"avatar\":\"ProfileInfo_avatar__3AYMw\",\"contactsBlock\":\"ProfileInfo_contactsBlock__1m81m\",\"contactsBlock_Edit\":\"ProfileInfo_contactsBlock_Edit__1q3uj\",\"photoBlock\":\"ProfileInfo_photoBlock__Bph9H\",\"fullNameUser\":\"ProfileInfo_fullNameUser__3t6fW\",\"statusProfile\":\"ProfileInfo_statusProfile__1uy8h\",\"workSearchBlock\":\"ProfileInfo_workSearchBlock__HHdEZ\",\"workSearchBlockEdit\":\"ProfileInfo_workSearchBlockEdit__2fgTR\",\"searchWork\":\"ProfileInfo_searchWork__1mE7l\",\"descrSearch\":\"ProfileInfo_descrSearch__1wBv_\",\"reInstall_ava\":\"ProfileInfo_reInstall_ava__HkP3Z\",\"preloaderNewAva\":\"ProfileInfo_preloaderNewAva__OVb3F\",\"form_summary_error\":\"ProfileInfo_form_summary_error__2mufh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusProfile\":\"status_statusProfile__28djk\",\"changeStatus\":\"status_changeStatus__2M_RL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__NV3PC\",\"wrapper\":\"Post_wrapper__1wwZs\",\"times\":\"Post_times__3wAgA\",\"userName\":\"Post_userName__11t48\",\"messages\":\"Post_messages__MzDfT\",\"like\":\"Post_like__3Jakz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1y7j0\",\"posts\":\"MyPosts_posts__3209h\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './status.module.css';\r\n\r\n\r\nconst {statusProfile, changeStatus} = s\r\n\r\ntype StatusPropsType = {\r\n    status: string | null\r\n    updateStatus: (newMess: string) => void\r\n}\r\n\r\n\r\nexport const StatusWithHooks = (props: StatusPropsType) => {\r\n\r\nconst [isEditMode,setIsEditMode] = useState<boolean>(false);\r\nconst [status,setStatus] = useState<string|null>(props.status);\r\n\r\n  useEffect(()=>{\r\n      setStatus(props.status);\r\n  },[props.status])\r\n\r\n    const toggleEditModeOn = () => {\r\n       setIsEditMode(true)\r\n    }\r\n    const toggleEditModeOff = () => {\r\n        setIsEditMode(false)\r\n        props.updateStatus(status ? status : 'none')\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {isEditMode ? <div className={changeStatus}>\r\n                    <input onBlur={toggleEditModeOff} onChange={onChangeStatus}\r\n                           type=\"text\"\r\n                           autoFocus={true}\r\n                           value={status ? status : ''}/>\r\n                    <button onClick={toggleEditModeOff}>Save</button>\r\n                </div> :\r\n                <div onDoubleClick={toggleEditModeOn}\r\n                     className={statusProfile}>status: {props.status ? props.status : 'none'}</div>}\r\n\r\n\r\n        </>)\r\n\r\n}","export default __webpack_public_path__ + \"static/media/NewAvaPreloader.fc7bf8dd.gif\";","import avatarBlock from '../../../../img/avatarBlock.png';\r\nimport {StatusWithHooks} from '../../Status/StatusWithHooks';\r\nimport NewAvaPreloader from '../../../../img/NewAvaPreloader.gif';\r\nimport React from 'react';\r\nimport s from '../ProfileInfo.module.css';\r\n\r\nconst {\r\n    descriptionBlock,\r\n    avatar,\r\n    contactsBlock,\r\n    fullNameUser,\r\n    photoBlock,\r\n    reInstall_ava,\r\n    preloaderNewAva,\r\n    workSearchBlock,\r\n    searchWork,\r\n    descrSearch\r\n\r\n} = s;\r\n\r\n\r\nconst PresentProfile = (props: any) => {\r\n\r\n    const {\r\n        profile,\r\n        status,\r\n        updateStatus,\r\n        isOwner,\r\n        initializedNewPhotoProfile,\r\n        onMainPhotoSelected,\r\n        btnHandler\r\n    } = props;\r\n\r\n    return (\r\n        <div className={descriptionBlock}>\r\n            <div className={photoBlock}>\r\n                <div className={fullNameUser}>{profile.fullName ? profile.fullName : 'noName noName'}</div>\r\n                <div className={avatar}>\r\n                    {profile.photos?.large ? <img src={profile.photos.large} alt=\"avatarUser\"/>\r\n                        : <img src={avatarBlock} alt=\"avatarUserNone\"/>}\r\n                </div>\r\n                <StatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {isOwner ? initializedNewPhotoProfile ? <form className={reInstall_ava}>\r\n                    <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                </form> : <div className={preloaderNewAva}><img src={NewAvaPreloader}/></div> : ' '}\r\n            </div>\r\n            <div className={contactsBlock}>\r\n                Contact information:\r\n                {isOwner && <button onClick={() => {\r\n                    btnHandler(true)\r\n                }}>To EditMode</button>}\r\n                    <div>Facebook: <a href={profile.contacts.facebook}>{profile.contacts.facebook}</a></div>\r\n                    <div>Web-site: <a href={profile.contacts.website}>{profile.contacts.website}</a></div>\r\n                    <div>VK : <a href={profile.contacts.vk}>{profile.contacts.vk}</a></div>\r\n                    <div>Twitter : <a href={profile.contacts.twitter}>{profile.contacts.twitter}</a></div>\r\n                    <div>Instagram : <a href={profile.contacts.instagram}>{profile.contacts.instagram}</a></div>\r\n                    <div>Youtube : <a href={profile.contacts.youtube}>{profile.contacts.youtube}</a></div>\r\n                    <div> Github : <a href={profile.contacts.github}>{profile.contacts.github}</a></div>\r\n                    <div> MainLink: <a href={profile.contacts.mainLink}>{profile.contacts.mainLink}</a></div>\r\n            </div>\r\n            <div className={workSearchBlock}>\r\n                {profile.lookingForAJob ?\r\n                    <div className={searchWork}>I am search a work:<input type=\"checkbox\" checked={true}/></div> :\r\n                    <div className={searchWork}>I'm not going to search work!</div>}\r\n                {profile.lookingForAJobDescription ?\r\n                    <div className={descrSearch}>Description : {profile.lookingForAJobDescription}</div> :<div className={descrSearch}>Description : </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default PresentProfile;","import avatarBlock from '../../../../img/avatarBlock.png';\r\nimport {StatusWithHooks} from '../../Status/StatusWithHooks';\r\nimport NewAvaPreloader from '../../../../img/NewAvaPreloader.gif';\r\nimport React from 'react';\r\nimport s from '../ProfileInfo.module.css';\r\nimport {createField, InputValid} from '../../../common/FormsControls/FormsControls';\r\nimport {requiredField} from '../../../../utils/validators';\r\nimport {maxLength30} from '../../MyPosts/ReduxMyPostForm';\r\nimport {reduxForm} from 'redux-form';\r\n\r\n\r\nconst {\r\n    descriptionBlock,\r\n    avatar,\r\n    fullNameUser,\r\n    photoBlock,\r\n    workSearchBlockEdit,\r\n    reInstall_ava,\r\n    preloaderNewAva,\r\n    contactsBlock_Edit,\r\n    searchWork,\r\n    descrSearch,\r\n    form_summary_error\r\n} = s;\r\n\r\n\r\n\r\n\r\nconst EditProfile = (props: any) => {\r\n\r\n    const {\r\n        profile,\r\n        status,\r\n        updateStatus,\r\n        isOwner,\r\n        initializedNewPhotoProfile,\r\n        onMainPhotoSelected,\r\n        error,\r\n    } = props;\r\n\r\n\r\n    return (<form onSubmit={props.handleSubmit} >\r\n            <div className={descriptionBlock}>\r\n            <div className={photoBlock}>\r\n                <div\r\n                    className={fullNameUser}>FullName: {createField('fullName', InputValid, {type: 'text'}, profile.fullName, [requiredField, maxLength30])}</div>\r\n                <div className={avatar}>\r\n                    {profile.photos?.large ? <img src={profile.photos.large} alt=\"avatarUser\"/>\r\n                        : <img src={avatarBlock} alt=\"avatarUserNone\"/>}\r\n                </div>\r\n                <StatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {isOwner ? initializedNewPhotoProfile ? <div className={reInstall_ava}>\r\n                    <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n                </div> : <div className={preloaderNewAva}><img src={NewAvaPreloader}/></div> : ' '}\r\n            </div>\r\n            <div className={contactsBlock_Edit}>\r\n                Contact information:\r\n                <button>Save</button>\r\n                {error ? <div className={form_summary_error}>\r\n                    {error}\r\n                </div> : ''}\r\n                <div>Facebook:{createField('contacts.facebook', InputValid, {type: 'text'}, profile.contacts.facebook, [requiredField, maxLength30])}</div>\r\n                <div>Web-site : {createField('contacts.website', InputValid, {type: 'text'}, profile.contacts.website, [requiredField, maxLength30])}</div>\r\n                <div>VK: {createField('contacts.vk', InputValid, {type: 'text'}, profile.contacts.vk, [requiredField, maxLength30])}</div>\r\n                <div>Twitter : {createField('contacts.twitter', InputValid, {type: 'text'}, profile.contacts.twitter, [requiredField, maxLength30])}</div>\r\n                <div>Instagram : {createField('contacts.instagram', InputValid, {type: 'text'}, profile.contacts.instagram, [requiredField, maxLength30])}</div>\r\n                <div>YouTube : {createField('contacts.youtube', InputValid, {type: 'text'}, profile.contacts.youtube, [requiredField, maxLength30])}</div>\r\n                <div>GitHub : {createField('contacts.github', InputValid, {type: 'text'}, profile.contacts.github, [requiredField, maxLength30])}</div>\r\n                <div>MainLink : {createField('contacts.mainLink', InputValid, {type: 'text'}, profile.contacts.mainLink, [requiredField, maxLength30])}</div>\r\n            </div>\r\n            <div className={workSearchBlockEdit}>\r\n                <div className={searchWork}>Do you search a work?:{createField('lookingForAJob', 'input', {type: 'checkbox'}, null, null)}</div>\r\n\r\n                <div className={descrSearch}>Description:{createField('lookingForAJobDescription', InputValid, {type: 'text'}, profile.lookingForAJobDescription, [requiredField, maxLength30])}</div>\r\n            </div>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileEditReduxForm = reduxForm<any, any>({form: 'edit_profile'})(EditProfile)\r\n\r\n\r\nexport default ProfileEditReduxForm;","import React, {ChangeEventHandler} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../Preloader/Preloader';\r\nimport {ProfileResponseType} from '../ProfileContainer';\r\nimport PresentProfile from './Experemental/PresentProfile';\r\nimport ProfileEditReduxForm from './Experemental/EditProfile';\r\nimport {TrueFormDataProfileType} from '../../../Redux/ProfilePage-reducer';\r\n\r\n\r\nconst {\r\n    descriptionBlock,\r\n} = s;\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: null | string\r\n    updateStatus: (newMess: string) => void\r\n    savePhoto: (newPhoto: File) => void\r\n    isOwner: boolean\r\n    initializedNewPhotoProfile: boolean\r\n    isProfileSetMode: boolean\r\n    SetIsProfileSetMode: (newStatus: boolean) => void\r\n    saveProfile: (profile: TrueFormDataProfileType) => any // if unCorrect input saveProfile returned Promise.reject\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const {\r\n        profile,\r\n        status,\r\n        updateStatus,\r\n        isOwner,\r\n        savePhoto,\r\n        initializedNewPhotoProfile,\r\n        isProfileSetMode,\r\n        SetIsProfileSetMode,\r\n        saveProfile\r\n    } = props;\r\n\r\n    const onMainPhotoSelected: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n        e.target.value = '';\r\n    }\r\n\r\n\r\n    const btnHandler = (newStatus: boolean) => {\r\n        SetIsProfileSetMode(newStatus)\r\n    }\r\n\r\n\r\n    const onSubmit = (formData: TrueFormDataProfileType) => {\r\n        saveProfile(formData).then(() => btnHandler(false))\r\n    }\r\n\r\n    if (!profile) {\r\n        return (<div>\r\n            <div className={descriptionBlock}>\r\n                <Preloader/>\r\n            </div>\r\n        </div>)\r\n    } else {\r\n\r\n        return (\r\n            <div>\r\n                {!isProfileSetMode ?\r\n                    <PresentProfile profile={profile}\r\n                                    status={status}\r\n                                    updateStatus={updateStatus}\r\n                                    isOwner={isOwner}\r\n                                    initializedNewPhotoProfile={initializedNewPhotoProfile}\r\n                                    onMainPhotoSelected={onMainPhotoSelected}\r\n                                    btnHandler={btnHandler}/>\r\n                    :\r\n                    <ProfileEditReduxForm initialValues={profile}\r\n                                          onSubmit={onSubmit}\r\n                                          profile={profile}\r\n                                          status={status}\r\n                                          updateStatus={updateStatus}\r\n                                          isOwner={isOwner}\r\n                                          initializedNewPhotoProfile={initializedNewPhotoProfile}\r\n                                          onMainPhotoSelected={onMainPhotoSelected}\r\n                                          btnHandler={btnHandler}\r\n                    />}\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default ProfileInfo;","export default __webpack_public_path__ + \"static/media/heart.68cd17a2.png\";","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport heart from './heart.png';\r\n\r\nconst {item, wrapper, userName, messages, times, like} = s;\r\n\r\nexport type PostType = {\r\n    avatar: string\r\n    name: string\r\n    message: string\r\n    time: string\r\n    likes: number\r\n    id: number\r\n}\r\n\r\n\r\nconst Post: React.FC<PostType> = ({avatar, name, message, time, likes, id}) => {\r\n    return (\r\n        <div key={id} className={item}>\r\n            <img src={avatar} alt={'avatar'}/>\r\n            <div className={wrapper}>\r\n                <div className={userName}>{name}</div>\r\n                <div className={messages}>{message}</div>\r\n                <div className={times}>{time}</div>\r\n                <div className={like}><img src={heart} alt=\"heart\"/>{likes}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Post;","import React from 'react';\r\nimport Post, {PostType} from './Post/Post';\r\nimport s from './MyPosts.module.css';\r\nimport {MyPostPropsType} from './MyPostsContainer';\r\nimport ReduxMyPostForm, {NewPostMsgType} from './ReduxMyPostForm';\r\n\r\nconst {postsBlock, posts} = s;\r\n\r\nconst MyPosts = React.memo((props: MyPostPropsType) => {\r\n\r\n    const {postData, addPost} = props;\r\n\r\n\r\n    const postComponents = postData ? [...postData]\r\n        .map((t: PostType) => (<Post key={t.id}\r\n                                                                           avatar={t.avatar}\r\n                                                                           name={t.name}\r\n                                                                           message={t.message}\r\n                                                                           time={t.time}\r\n                                                                           likes={t.likes}\r\n                                                                           id={t.id}\r\n    />)) : ''\r\n\r\n\r\n    const onSubmit = (data: NewPostMsgType) => {\r\n        addPost(data.NewPost)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={postsBlock}>\r\n            <h3> My post </h3>\r\n            <div>\r\n                <ReduxMyPostForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={posts}>\r\n                {postComponents}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import {\r\n    addPost,\r\n    addPostTypeForMyPostContainer,\r\n} from '../../../Redux/ProfilePage-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {PostDataType} from '../Profile';\r\nimport {stateUsersType} from '../ProfileContainer';\r\n\r\ntype DispatchPropsMyPostsType = {\r\n    addPost: addPostTypeForMyPostContainer\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: stateUsersType): PostDataType => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n\r\n    }\r\n}\r\n\r\nexport type MyPostPropsType = PostDataType & DispatchPropsMyPostsType\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {PostType} from './MyPosts/Post/Post';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from './ProfileContainer';\r\n\r\n\r\n\r\nexport type PostDataType = {\r\n    postData: PostType[]\r\n}\r\n\r\n\r\nconst Profile = (props:ProfileType) => {\r\n    const {updateStatus, status, profile, isOwner,savePhoto,initializedNewPhotoProfile,isProfileSetMode,SetIsProfileSetMode,saveProfile} = props\r\n    return (<div>\r\n        <ProfileInfo saveProfile={saveProfile} SetIsProfileSetMode={SetIsProfileSetMode} isProfileSetMode={isProfileSetMode} initializedNewPhotoProfile={initializedNewPhotoProfile} savePhoto={savePhoto} isOwner={isOwner} updateStatus={updateStatus} status={status} profile={profile}/>\r\n        <MyPostsContainer/>\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    getProfile,\r\n    getStatus,\r\n    InitialStateProfileType,\r\n    SetUsersProfile,\r\n    updateStatus,\r\n    SetUsersForProfileType,\r\n    savePhoto,\r\n    SetIsProfileSetMode,\r\n    saveProfile,\r\n    TrueFormDataProfileType\r\n} from '../../Redux/ProfilePage-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from '../../Redux/ReduxStore';\r\nimport {withAuthRedirect} from '../../HOC/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\n\r\ntype ProfileContactsType = {\r\n    github: string | null\r\n    vk: string | null\r\n    facebook: string | null\r\n    instagram: string | null\r\n    twitter: string | null\r\n    website: string | null\r\n    mainLink: string | null\r\n    youtube: string | null\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\n\r\nexport type ProfileResponseType = {\r\n    aboutMe?: string\r\n    userId?: number\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string | null\r\n    fullName?: string\r\n    contacts?: ProfileContactsType\r\n    photos: ProfilePhotosType|undefined\r\n}\r\n\r\n\r\nexport type stateUsersType = {\r\n    profilePage: InitialStateProfileType\r\n}\r\n\r\ntype mapDispatchToPropsUsersType = {\r\n    SetUsersProfile: SetUsersForProfileType\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (newStatus: string) => void\r\n    savePhoto:(photo: File)=>void\r\n    SetIsProfileSetMode:(newStatus: boolean) => void\r\n    saveProfile:(profile:TrueFormDataProfileType)=>void\r\n}\r\n\r\n\r\ntype PropsContainerProfileType = ProfileType & mapDispatchToPropsUsersType\r\n\r\n\r\ntype UserIdType = {\r\n    userId: string\r\n\r\n}\r\n\r\ntype PropsAPIContainerType = RouteComponentProps<UserIdType> & PropsContainerProfileType\r\n\r\n\r\nclass ProfileContainerAPI extends React.Component<PropsAPIContainerType> {\r\n\r\n    refreshProfile() {\r\n        let usersId: number = +this.props.match.params.userId;\r\n        if (!usersId) {\r\n            usersId = +this.props.userIdLog;\r\n        }\r\n        this.props.getProfile(usersId);\r\n        this.props.getStatus(usersId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsAPIContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userId !==prevProps.match.params.userId  ) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Profile {...this.props} saveProfile={this.props.saveProfile} SetIsProfileSetMode={this.props.SetIsProfileSetMode} isProfileSetMode={this.props.isProfileSetMode} initializedNewPhotoProfile={this.props.initializedNewPhotoProfile}  isOwner={isNaN(+this.props.match.params.userId)} profile={this.props.profile} status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>\r\n    }\r\n}\r\n\r\nexport type ProfileType = {\r\n    profile: ProfileResponseType | null\r\n    status: null | string\r\n    updateStatus: (newMess: string) => void\r\n    userIdLog: string\r\n    isOwner:boolean\r\n    savePhoto: (newPhoto: File) => void\r\n    initializedNewPhotoProfile:boolean\r\n    isProfileSetMode:boolean\r\n    SetIsProfileSetMode:(newStatus: boolean) => void\r\n    saveProfile:(profile:TrueFormDataProfileType)=>void\r\n\r\n}\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: string | null\r\n    userIdLog: number | null\r\n    isFetching: boolean\r\n    initializedNewPhotoProfile:boolean\r\n    isProfileSetMode:boolean\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userIdLog: state.Auth.id,\r\n        isFetching: state.Auth.isFetching,\r\n        initializedNewPhotoProfile:state.profilePage.initializedNewPhotoProfile,\r\n        isProfileSetMode:state.profilePage.isProfileSetMode\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, mapDispatchToPropsUsersType, {}, AppStateType>(mapStateToProps, {\r\n        SetUsersProfile,\r\n        getProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        SetIsProfileSetMode,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainerAPI)"],"sourceRoot":""}